#! /usr/bin/env python
# encoding: utf-8

def build(ctx):
    ctx.shlib(target = 'zcm',
              # Note: Had to make the include path one level up so that includes
              #       within this directory structure would match the structure
              #       of the installed files. Includes should be written as:
              #       #include "zcm/file.h".
              includes = '..',
              export_includes = '..',
              use = ['default', 'zmq'],
              source = ctx.path.ant_glob(['*.cpp', '*.c',
                                          'util/*.c', 'util/*.cpp',
                                          'transport/*.c', 'transport/*.cpp']))

    ## Collect files for Embedded
    ctx(rule = 'tar cfz ${TGT} ${SRC}',
        source = 'zcm.h zcm_coretypes.h transport.h nonblocking.h nonblocking.c',
        target = 'zcm-embed.tar.gz')

    ctx.add_post_fun(exec_test_embedded)

    ctx.install_files('${PREFIX}/include/zcm',
                      ['zcm.h', 'zcm_coretypes.h', 'transport.h', 'transport_registrar.h', 'url.h', 'eventlog.h',
                       'zcm-cpp.hpp', 'zcm-cpp-impl.hpp'])

    ctx.recurse('java');
    ctx.recurse('js');

def exec_test_embedded(ctx):
    #try:
    blddir = ctx.path.get_bld().abspath()
    testdir = blddir+'/zcm/test-embed'
    embed_tarball = ctx.path.get_bld().abspath()+'/zcm/zcm-embed.tar.gz'
    print "TEST-EMBED: Attempting to build embedded code (zcm-embed.tar.gz) in C89 mode"
    print "----------------------------------------------------------------------------"
    ret = ctx.exec_command('rm -rf {0} && mkdir {0} && cd {0} && tar xf {1} && cc -std=c89 -I. -c zcm/*.c'.format(testdir, embed_tarball))
    print "TEST-EMBED:", ('Success' if ret == 0 else 'Failure')
