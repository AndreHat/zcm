#! /usr/bin/env python
# encoding: utf-8

import os, sys
import waflib
from waflib import Logs
from waflib.Errors import ConfigurationError

# these variables are mandatory ('/' are converted automatically)
top = '.'
out = 'build'

# Allow import of custom tools
sys.path.append('waftools')

def options(ctx):
    ctx.load('compiler_c')
    ctx.load('compiler_cxx')
    ctx.add_option('-s', '--symbols', dest='symbols', default=False, action='store_true',
                   help='Leave the debugging symbols in the resulting object files')
    ctx.add_option('-d', '--debug', dest='debug', default=False, action='store_true',
                   help='Compile all C/C++ code in debug mode: no optimizations and full symbols')

def configure(ctx):
    ctx.load('compiler_c')
    ctx.load('compiler_cxx')
    ctx.load('java')
    ctx.check_cfg(package='zcm', args='--cflags --libs', uselib_store='zcm')
    ctx.load('zcm-gen')

    # Using check_cfg to track down the jar so we can 'use' it when compiling java
    # unfortunately, check_cfg doesn't assign uselib variables like we'd like
    ctx.check_cfg(package='zcm', variables='classpath', uselib_store='zcm')
    ctx.env.CLASSPATH_zcmjar = ctx.env.zcm_classpath
    if not ctx.env.CLASSPATH_zcmjar:
        raise ConfigurationError('Failed to find zcm.jar')
    else:
        ctx.msg('Checking for zcm.jar', ctx.env.CLASSPATH_zcmjar);

    ctx.check_cfg(package='zcm-tools', variables='classpath', uselib_store='zcmtools')
    ctx.env.CLASSPATH_zcmtoolsjar = ctx.env.zcmtools_classpath
    if not ctx.env.CLASSPATH_zcmtoolsjar:
        raise ConfigurationError('Failed to find zcm-tools.jar')
    else:
        ctx.msg('Checking for zcm-tools.jar', ctx.env.CLASSPATH_zcmtoolsjar);

    if ctx.check_java_class('zcm.zcm.ZCM', ctx.env.CLASSPATH_zcmjar) != 0:
        Logs.pprint('RED', 'You probably just need to `source ./env`')
    if ctx.check_java_class('zcm.spy.Spy', ctx.env.CLASSPATH_zcmtoolsjar) != 0:
        Logs.pprint('RED', 'You probably just need to `source ./env`')

    if not os.environ.get('ZCM_DEFAULT_URL'):
        Logs.pprint('RED', 'Examples rely on ZCM_DEFAULT_URL being defined. Try `source ./env`')
        Logs.pprint('RED', 'This is not an error and can be ignored if you know what you are doing')

def setup_environment(ctx):
    ctx.post_mode = waflib.Build.POST_LAZY
    ctx.env.VERSION='1.0.0'

    useOptimize = not waflib.Options.options.debug
    useSymbols = waflib.Options.options.debug or waflib.Options.options.symbols

    WARNING_FLAGS = ['-Wall', '-Werror', '-Wno-unused-function', '-Wno-format-zero-length']
    SYM_FLAGS = ['-g']
    OPT_FLAGS = ['-O3']
    ctx.env.CFLAGS_default   = ['-std=gnu99', '-fPIC'] + WARNING_FLAGS
    ctx.env.CXXFLAGS_default = ['-std=c++11', '-fPIC'] + WARNING_FLAGS
    ctx.env.LINKFLAGS_default = ['-pthread']

    if useOptimize:
        ctx.env.CFLAGS_default   += OPT_FLAGS
        ctx.env.CXXFLAGS_default += OPT_FLAGS
    if useSymbols:
        ctx.env.CFLAGS_default   += SYM_FLAGS
        ctx.env.CXXFLAGS_default += SYM_FLAGS

    ctx.env.ENVIRONMENT_SETUP = True

def build(ctx):
    if not ctx.env.ENVIRONMENT_SETUP:
        setup_environment(ctx)

    ctx.recurse('types')
    ctx.recurse('c')
    ctx.recurse('cpp')
    ctx.recurse('java')

def distclean(ctx):
    os.system('rm -f waftools/*.pyc')
    waflib.Scripting.distclean(ctx)
